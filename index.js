const Telegraf = require('telegraf');

const HttpsProxyAgent = require('https-proxy-agent');

const cfg = require('./helpers/config');
const otkrivator = require('./helpers/otkrivator');
const jitsi = require('./helpers/jitsi');
const bells = require('./helpers/bells');
const myself = require('./helpers/myself');
const easterEggs = require('./helpers/easterEggs');
const kursGen = require('./helpers/wizard-kurs-report-generator');
const menu = require('./helpers/menu');

/*const bot = new Telegraf(cfg.TG_TOKEN, {
    telegram: {
        agent: new HttpsProxyAgent('http://svg:svgpassw0rd@vslugin.ru:3128')
    }
});*/

const bot = new Telegraf(cfg.TG_TOKEN);
const addCase = {};
/*
* addCase - –±—É—Ñ–µ—Ä, –ø–æ–º–æ–≥–∞—é—â–∏–π –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è- –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª
* –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥—É–º–∞—Ç—å –≤–≤–æ–¥–∏—Ç—å –Ω–æ–≤–æ–µ –¥–µ–ª–æ –∏ –∑–∞–±—å–µ—Ç –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ
* middlewares –ø–æ–º–µ—Ç–∏—Ç —Å–≤–æ–π—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–∞ == id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–∏—Ç –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤–≤–æ–¥–µ.
* –ó–∞—â–∏—Ç–∞ –æ—Ç —Å—É—á–∞–π–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
* */
// ######## Middleware ###########

bot.use(async (ctx, next) => { //—Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    const start = new Date();
    await next();
    const ms  = new Date() - start;
   ctx.reply(`–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${ms} –º—Å`);
});

bot.use(async (ctx, next) => {  //–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–∏—è –∑–∞–ø–∏—Å–∏ –¥–µ–ª
    const userId = ctx.from.id.toString();
    if(userId in addCase){
        if(addCase[userId] == true){
           delete addCase[userId];
        }
        else{
            addCase[userId] = true;
        }
    }
    await next();
});

// ######## Middleware ###########

const action = async (userId, userName, action) => {
    const ACCESS_DENIED_MESSAGE = userName + ', –í–∞–º –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –°–æ–æ–±—â–∏—Ç–µ –≤–∞—à ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–Ω–æ–º–æ—á–∏–π: ' + userId;
    const WELCOME_MESSAGE = [
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ' + userName,
        '–î–µ–π—Å—Ç–≤–∏—è:',
        '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤: /bells',
        '–°—Ç–∞—Ç—É—Å Jitsi: /jh',
        '–û—Ç–∫—Ä—ã—Ç—å –í–¶: /open_vc',
        '–û—Ç–∫—Ä—ã—Ç—å –º–∞—Å—Ç–µ—Ä—Å–∫–∏–µ: /open_m',
        '–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞: /myself',
    ].join('\n');

    const MYSELF_MENU_L1 = [
        '–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞:',
        '–ü—Ä–æ—Å–º–æ—Ç—Ä: /myselfList',
        '–î–æ–±–∞–≤–∏—Ç—å: /myselfNew',
        '–û—á–∏—Å—Ç–∏—Ç—å: /myselfClear'
    ].join('\n');

    const HELP_MESSAGE = [
        '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start',
        '–ß—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–ª–æ –≤–≤–µ–¥–∏:',
        '–î–µ–ª–æ: %whatYourDo%'
    ].join('\n');

    const ACTION = (action) ? action : '*';
    // check access
    if (cfg.VALID_USERS.indexOf(userId) === -1) {
        return ACCESS_DENIED_MESSAGE;
    }

    switch (action) {
        case 'start':
            return WELCOME_MESSAGE;
        case 'open_vc':
            return await otkrivator.openItPark();
        case 'bells':
            return await bells.info();
        case 'jh':
            return userName + ', ' + await jitsi.health();
        case 'open_m':
            return await otkrivator.openMasterskie();
        case 'myself':
            return MYSELF_MENU_L1;
        case 'myselfList':
            return await myself.list(userId, userName);
        case 'myselfNew':
            addCase[userId] = false;
            return '–ß—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–ª, –¥—Ä—É–∂–æ—á–µ–∫?';
        case 'myselfClear':
            return await myself.clear(userId);
//        case 'voice':
//            return easterEggs.getEgg(userId, userName, 'voice');
        case 'help':
            return HELP_MESSAGE;
    }

};

bot.start(async (ctx) => {
    ctx.reply(await action(ctx.from.id.toString(), ctx.from.first_name, 'start'));
});

bot.help(async (ctx) => {
    ctx.reply(await action(ctx.from.id.toString(), ctx.from.first_name, 'help'));
});
//bot.hears('–≥–æ–ª–æ—Å!', async (ctx) => {
//    ctx.reply(await action(ctx.from.id.toString(), ctx.from.first_name, 'voice'));
//});

//bot.command('voice', async (ctx) => {
//    ctx.reply(await action(ctx.from.id.toString(), ctx.from.first_name, 'voice'));
//});

bot.command('open_vc', async (ctx) => {
    ctx.reply(await action(ctx.from.id.toString(), ctx.from.first_name, 'open_vc'));
});

bot.command('bells', async (ctx) => {
    ctx.replyWithHTML(await action(ctx.from.id.toString(), ctx.from.first_name, 'bells'));
});

bot.command('jh', async (ctx) => {
    ctx.reply(await action(ctx.from.id.toString(), ctx.from.first_name, 'jh'));
});

bot.command('open_m', async (ctx) => {
    ctx.reply(await action(ctx.from.id.toString(), ctx.from.first_name, 'open_m'));
});

bot.command('myself', async (ctx) => {
    ctx.reply(await action(ctx.from.id.toString(), ctx.from.first_name, 'myself'));
});

bot.command('myselfList', async (ctx) => {
    ctx.reply(await action(ctx.from.id.toString(), ctx.from.first_name, 'myselfList'));
});

bot.command('myselfNew', async (ctx) => {
    ctx.reply(await action(ctx.from.id.toString(), ctx.from.first_name, 'myselfNew'));
});

bot.command('myselfClear',  async (ctx) => {
    ctx.reply("–í–æ—É, –¥—Ä—É–∂–æ—á–µ–∫, —É —Ç–µ–±—è —Å–µ—Ä—å–µ–∑–Ω—ã–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è.\n –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–±—ã—Ç—å –≤—Å–µ, —á—Ç–æ –±—ã–ª–æ- –Ω–∞–ø–∏—à–∏:\n " +
        "–¢–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ –∫–ª—è–Ω—É—Å—å, —á—Ç–æ —Ö–æ—á—É —Å—Ç–∞—Ç—å –±–µ–∑–¥–µ–ª—å–Ω–∏–∫–æ–º –∏ –∑–∞–±—ã—Ç—å –≤—Å–µ –±—ã–ª—ã–µ –ø–æ—Å—Ç—É–ø–∫–∏! –†–∞–º–∏–Ω—å!");
});

//–µ—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –±—É–¥–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω, —Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
bot.on('text', async (ctx) => {
    const userId = ctx.from.id.toString();
    if(userId in addCase) {
        delete addCase[userId];
        ctx.reply(await myself.new(userId, ctx.from.first_name, ctx.message.text.trim()));
    }
    else{
        if (ctx.message.text.startsWith('–î–µ–ª–æ:')) {
            ctx.reply(await myself.new(userId, ctx.from.first_name, ctx.message.text.slice(5).trim()));
        } else {
            if (ctx.message.text === "–¢–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ –∫–ª—è–Ω—É—Å—å, —á—Ç–æ —Ö–æ—á—É —Å—Ç–∞—Ç—å –±–µ–∑–¥–µ–ª—å–Ω–∏–∫–æ–º –∏ –∑–∞–±—ã—Ç—å –≤—Å–µ –±—ã–ª—ã–µ –ø–æ—Å—Ç—É–ø–∫–∏! –†–∞–º–∏–Ω—å!") {
                ctx.reply(await action(userId, ctx.from.first_name, 'myselfClear'));
            } else {
                ctx.reply('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –¥—Ä—É–≥! –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /start –∏ –º—ã –Ω–∞—á–Ω–µ–º');
            }
        }
    }
});
//ctx.message.text
// dfl
// bot.start((ctx) => ctx.reply('Welcome'));
// bot.help((ctx) => ctx.reply('Send me a sticker'));
// bot.on('sticker', (ctx) => ctx.reply('üëç'));
// bot.hears('hi', (ctx) => ctx.reply('Hey there'));
// bot.hears('–ï–±–æ—Ç?', (ctx) => ctx.reply('–î–∞, —è —Ç—É—Ç. –¢–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: /new'));
// bot.hears('/new', (ctx) => ctx.reply('–ê–≥–∞'));

// kursGen.init(bot);

bot.launch();
